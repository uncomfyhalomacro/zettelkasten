:PROPERTIES:
:ID:       ffdc4c59-21c3-4c55-98ad-dec0883ccc41
:END:
#+title: LLVM

As described on their website https://www.llvm.org/, LLVM or "Low Level Virtual Machine"
is a collection of compiler toolchain technologies. Programming languages such as [[id:ac5483d3-ad5a-4256-a4a5-9c8a2bdf86a3][Rust]], [[id:012ea94d-2074-4147-a72a-94efb4b38ed4][Julia]],
and [[id:c4a7fa2e-945c-442f-b529-8f42d16cfb62][Crystal]] took leverage of [[id:ffdc4c59-21c3-4c55-98ad-dec0883ccc41][LLVM]] giving them the edge on performance, and tooling.

* Building LLVM from Source

** Core libraries and additions

- ~llc~: LLVM static compiler. Takes a file written in LLVM-IR as input and compiles it.
- ~llvm-objdump~ and ~llvm-dwarfdump~: lets you inspect object files.
- ~llvm-ar~: lets you archive object files.
- Polly project: sets of optimizations for LLVM based on a mathematical representation of
  a **polyhedral model**. Found in the ~polly~ directory.
- MLIR project: multi-level intermediate representation of LLVM. Makes LLVM IR extensible
  and capture this information in a domain-specific representation. Found in the ~mlir~
  directory.

** Compilers and tools

- ~clang~: compiler for C/C++/Objective-C/Objective-C++.
- ~clang-format~: formats C/C++ source files and source fragments according to rules
  provided by the user. Aims to be compatible with gcc and Microsoft's C/C++ compiler.

*** Additional tools for C/C++

These are provided by ~clang-tools-extra~ project in the directory of the same name.

- ~clang-tidy~: lint style checker for C/C++.
- ~llgo~: Go programming language compiler for easy interfacing with LLVM. Unmaintained.
- ~lld~: LLVM linker. Supports ELF, COFF, Mach-O, and WebAssembly formats.
- ~lldb~: Debugger for LLVM. Similar to GDB and supports C, C++ and Objective C/C++ out of
  the box.

** Prerequisites

Before installing, we should have the prerequisites first. In the book, there was no mention of
openSUSE TumbleWeed but I already have what I needed. For those that want to reproduce, just do

#+begin_src sh
  sudo zypper in gcc g++ git cmake-full ninja
#+end_src

To install LLVM, it is best to begin by compiling *LLVM from source*.

Instructed to clone the repo but with at least 400k commits already, I don't need
that much history.

However, for a small computer like mine, it's more feasible to do just the following

#+begin_src sh
  git clone --depth 1 --branch llvmorg-12.0.0 https://github.com/llvm/llvm-project.git
#+end_src

This saves a lot of time and storage when I just need that revision.

*tl;dr* I already know git so let's skip.

*** Building LLVM 12

Cmake is used to build LLVM. On Windows, the backlash character ~\\~ is the directory
name separator. Cmake automatically *converts* the Unix separator into the Windows one.

~-G~ option on Cmake allows you to generate build files with your system of choice.

- Ninja
- Unix Makefile / GNU Make
- Visual Studio
- XCode

I am using a GNU/Linux system specifically the openSUSE Tumbleweed distribution so it is either
Ninja or GNU Make.

I am going to use Samurai here, a Ninja alternative written in C with faster build times.

Installing Samurai is easy with

#+begin_src sh
  sudo zypper in samurai
#+end_src

Running the following to tell cmake to use samurai as the `CMAKE_MAKE_PROGRAM`.

#+begin_src sh
  cmake -G Ninja -DCMAKE_MAKE_PROGRAM=samu -DLLVM_ENABLE_PROJECTS=clang -DLLVM_CCACHE_BUILD=1 ../llvm
#+end_src

Once the build files have been generated, we can then just run 

#+begin_src sh
samu
#+end_src

or

#+begin_src sh
samu -j2
#+end_src

because I want my computer to run other tasks such as browsing, text-editing, and
watching memes.

**** Useful variables for me defined by CMAKE

- ~CMAKE_INSTALL_PREFIX~: path prefix to where you want the installation to be.
- ~CMAKE_BUILD_TYPE~: different build types requiring different settings.
  - ~RELEASE~: optimization for speed.
  - ~RELWITHDEBINFO~: release build with debug symbols.
  - ~MINSIZEREL~: optimization for size.
  - ~DEBUG~: default build type. build with debug symbols.

Most of this are fine for without unless you have a specific purpose in mind.

I could use the ~CMAKE_INSTALL_PREFIX~ but installing LLVM and Clang to ~/usr/local~ is fine.

For further information of CMAKE variables for LLVM 12, the book included this link:

[https://releases.llvm.org/12.0.0/docs/CMake.html#llvm-specific-variables](https://releases.llvm.org/12.0.0/docs/CMake.html#llvm-specific-variables)

* Important

Found out that GNU linker's ~ld~ is very inefficient and a memory hog. It's also slow. I changed the linker to ~mold~ with the ~LLVM_USE_LINKER~ flag and got
it built but I want it to have debug symbols so I rebuilt with the command:

#+begin_src sh
cmake -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_MAKE_PROGRAM=samu -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLLVM_USE_LINKER=mold -D LLVM_ENABLE_PROJECTS=clang -DLLVM_CCACHE_BUILD=1 ../llvm
#+end_src

Changed also the C/C++ compiler to ~clang~ because why not? I have it already built. ðŸ˜›

:PROPERTIES:
:ID:       ffdc4c59-21c3-4c55-98ad-dec0883ccc41
:END:
#+title: LLVM

As described on their website https://www.llvm.org/, LLVM or "Low Level Virtual Machine"
is a collection of compiler toolchain technologies. Programming languages such as [[id:ac5483d3-ad5a-4256-a4a5-9c8a2bdf86a3][Rust]], [[id:012ea94d-2074-4147-a72a-94efb4b38ed4][Julia]],
and [[id:c4a7fa2e-945c-442f-b529-8f42d16cfb62][Crystal]] took leverage of [[id:ffdc4c59-21c3-4c55-98ad-dec0883ccc41][LLVM]] giving them the edge on performance, and tooling.

* Building LLVM from Source

** Core libraries and additions

- ~llc~: LLVM static compiler. Takes a file written in LLVM-IR as input and compiles it.
- ~llvm-objdump~ and ~llvm-dwarfdump~: lets you inspect object files.
- ~llvm-ar~: lets you archive object files.
- Polly project: sets of optimizations for LLVM based on a mathematical representation of
  a **polyhedral model**. Found in the ~polly~ directory.
- MLIR project: multi-level intermediate representation of LLVM. Makes LLVM IR extensible
  and capture this information in a domain-specific representation. Found in the ~mlir~
  directory.

** Compilers and tools

- ~clang~: compiler for C/C++/Objective-C/Objective-C++.
- ~clang-format~: formats C/C++ source files and source fragments according to rules
  provided by the user. Aims to be compatible with gcc and Microsoft's C/C++ compiler.

*** Additional tools for C/C++

These are provided by ~clang-tools-extra~ project in the directory of the same name.

- ~clang-tidy~: lint style checker for C/C++.
- ~llgo~: Go programming language compiler for easy interfacing with LLVM. Unmaintained.
- ~lld~: LLVM linker. Supports ELF, COFF, Mach-O, and WebAssembly formats.
- ~lldb~: Debugger for LLVM. Similar to GDB and supports C, C++ and Objective C/C++ out of
  the box.

** Prerequisites

Before installing, we should have the prerequisites first. In the book, there was no mention of
openSUSE TumbleWeed but I already have what I needed. For those that want to reproduce, just do

#+begin_src sh
  sudo zypper in gcc g++ git cmake-full ninja
#+end_src

To install LLVM, it is best to begin by compiling *LLVM from source*.

Instructed to clone the repo but with at least 400k commits already, I don't need
that much history.

However, for a small computer like mine, it's more feasible to do just the following

#+begin_src sh
  git clone --depth 1 --branch llvmorg-12.0.0 https://github.com/llvm/llvm-project.git
#+end_src

This saves a lot of time and storage when I just need that revision.

*tl;dr* I already know git so let's skip.

*** Building LLVM 12

Cmake is used to build LLVM. On Windows, the backlash character ~\\~ is the directory
name separator. Cmake automatically *converts* the Unix separator into the Windows one.

~-G~ option on Cmake allows you to generate build files with your system of choice.

- Ninja
- Unix Makefile / GNU Make
- Visual Studio
- XCode

I am using a GNU/Linux system specifically the openSUSE Tumbleweed distribution so it is either
Ninja or GNU Make.

I am going to use Samurai here, a Ninja alternative written in C with faster build times.

Installing Samurai is easy with

#+begin_src sh
  sudo zypper in samurai
#+end_src

Running the following to tell cmake to use samurai as the `CMAKE_MAKE_PROGRAM`.

#+begin_src sh
  cmake -G Ninja -DCMAKE_MAKE_PROGRAM=samu -DLLVM_ENABLE_PROJECTS=clang -DLLVM_CCACHE_BUILD=1 ../llvm
#+end_src

Once the build files have been generated, we can then just run 

#+begin_src sh
  samu
#+end_src

or

#+begin_src sh
  samu -j2
#+end_src

because I want my computer to run other tasks such as browsing, text-editing, and
watching memes.

**** Useful variables for me defined by CMAKE

- ~CMAKE_INSTALL_PREFIX~: path prefix to where you want the installation to be.
- ~CMAKE_BUILD_TYPE~: different build types requiring different settings.
  - ~RELEASE~: optimization for speed.
  - ~RELWITHDEBINFO~: release build with debug symbols.
  - ~MINSIZEREL~: optimization for size.
  - ~DEBUG~: default build type. build with debug symbols.

Most of this are fine for without unless you have a specific purpose in mind.

I could use the ~CMAKE_INSTALL_PREFIX~ but installing LLVM and Clang to ~/usr/local~ is fine.

For further information of CMAKE variables for LLVM 12, the book included this link:

https://releases.llvm.org/12.0.0/docs/CMake.html#llvm-specific-variables

* Important

Found out that GNU linker's ~ld~ is very inefficient and a memory hog. It's also slow. I changed the linker to ~mold~ with the ~LLVM_USE_LINKER~ flag and got
it built but I want it to have debug symbols so I rebuilt with the command:

#+begin_src sh
cmake -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_MAKE_PROGRAM=samu -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLLVM_USE_LINKER=mold -D LLVM_ENABLE_PROJECTS=clang -DLLVM_CCACHE_BUILD=1 ../llvm
#+end_src

Changed also the C/C++ compiler to ~clang~ because why not? I have it already built. ðŸ˜›

