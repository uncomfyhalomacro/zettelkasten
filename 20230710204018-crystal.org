:PROPERTIES:
:ID:       c4a7fa2e-945c-442f-b529-8f42d16cfb62
:END:
#+hugo_base_dir: ~/development/projects/pages
#+hugo_section: notes
#+title: Crystal
#+date: 2023-07-11

This note is for my test drive of [[id:65f323d7-9580-4e98-ba6b-edc2d1ed8a7f][Programming Languages]]

I learned Crystal from the *Crystal Programming Book* authored by George Dietrich and
Guilherme Bernal (with other contributors).

* Brief History

- Crystal was created in 2011
- Manas Technology Solutions created the language (https://manas.tech)
- Authors
  - Ary Borenszweig
  - Brian Cardiff
  - Juan Wajnerman
- Has over 500 Contributors and growing
- Production Ready
- Source code is found at https://github.com/crystal-lang/crystal

** Features

- Static Typing
- Ruby-esque syntax
- Compiles into machine code
- Leverages LLVM
- Expressive as Ruby
- Concurrency
- Low-level; can call C libraries or assembly
- Project Manager called Shards. It's similar to [[id:ac5483d3-ad5a-4256-a4a5-9c8a2bdf86a3][Rust]]'s [[id:db41dc33-a11e-4c07-9ad0-25ee125fa49e][Cargo]]
- Multi-dispatch like [[id:012ea94d-2074-4147-a72a-94efb4b38ed4][Julia]] (There maybe some differences that I don't know)

#+begin_quote
The book was written when Crystal was at version 1.2.2, this note was written
at version 1.7.3.
#+end_quote

#+begin_quote
Although the language is much inspired by Ruby, it's definitely a new language.
#+end_quote

** Fast

Crystal is fast using *ahead-of-time compilation*. 

Crystal's compiler is *built upon LLVM*.

* Crystal's Code and Syntax

** Sample code


#+begin_src crystal
def get_name
  print "What's your name? "
  read_line
end

puts "Hello, " + get_name + "!"
#+end_src

Running crystal is as easy by invoking either =run= to run it directly, or =build= to build it as a binary.


#+begin_src shell
$ crystal run hello_name.cr
What's your name? Soc
Hello, Soc!

$ crystal build hello_name.cr

$ ./hello_name
What's your name? Soc
Hello, Soc!
#+end_src


* Values and expressions

** Primitive data types

- Integers
- Booleans
- Floats

** Variable assignment


#+begin_src crystal
score = 38
distance = 104
score = 41

p score

# Multi assignments
emma, josh = 16, 19
p josh
p emma

# Swap the values
josh, emma = emma, josh
p josh
p emma
#+end_src


#+begin_src crystal
# Constants are declared with uppercase letters
# They usually are in all caps.
LARGE_CONSTANT = 1000
PI = 3.14

# Constants can't be reassigned
# This line of code below will errors
# with "Error: can't reassign to constant"
LARGE_CONSTANT += 1
#+end_src


** Operators

- =+= addition
- =-= subtraction
- =*= multiplication
- =/= division
- =//= floor division
- =%= remainder integer division
- =num.ceil= ceiling function
- =num.floor= floor function
- =num.round= round to the nearest integer
- =num.abs= absolute value

*** Other types not mentioned

- =BigInt= arbitrarily large integer
- =BigFloat= arbitrarily large floating point numbers
- =BigDecimal= precise arbitrarily numbers in base 10. _Useful for currencies_
- =BigRational= expresses numbers as a numerator and denominator

*** Primitive constants

- =True=
- =False=
- =Nil=

*** Strings and chars

Strings are surrounded by double quotes (") and chars are surrounded by single quotes (')


#+begin_src crystal
iamstring = "Hello Crystal!"
iamchar = 'X'
iwillerror = 'xd'  # This will error since it's not double quoted.
kana = 'あ'   # Crystal accepts valid unicode.
#+end_src


#+begin_quote
Strings in crystal are immutable after they are created
#+end_quote


String methods or operations you can do with crystal are listed in pp. 46 of the book.

Examples:

- =str.size= the number of characters of a string
- =str.starts_with?(str)=, =str.ends_with?(str)=, =str.includes?(str)=, and =str.in?(str)=
- =str.split=

Most of these methods are commonly found in dynamic high-level langauges, *although of a different name*, e.g. Julia

*** Ranges

Crystal also has a very useful feature - operators for data type =Range=.


#+begin_src crystal
1..5         # => 1, 2, 3, 4, and 5. 
1...5        # => 1, 2, 3, and 4. 
1.0...4.0    # => Includes 3.9 and 3.999999, but not 4.
'a'..'z'     # => All the letters of the alphabet "aa".."zz"   # => All combinations of two letters 
#+end_src


#+begin_quote
Omitting the starts and ends gives you an open-ended range, even the idea of a pseudo-_infinite_ range with just =..=.
#+end_quote

**** Range operators

There are some range operators: 
- =range.includes?=, =range.covers?=, and =value.in? range=
- =range.each= - useful for do-end blocks
- =range.sample= - picks a random number on the interval
- =range.sum= - gets the sum of the range of values (or chars*, probably)

*** Enums and Symbols

#+begin_src crystal
# Enum
enum UserKind
  Guest
  Regular
  Admin
end

# Symbol
user_kind = :regular
#+end_src


#+begin_quote
Tip: Comparing symbols is more efficient than comparing strings.
#+end_quote


* Control Flow and Conditionals

** =if= and =unless=

Truthy values are those that are not `nil` nor `false`.


#+begin_src crystal
if guess == secret_number
  puts "You guessed it correctly!"
else
  puts "Sorry, the number was #{secret_number}."
end
#+end_src


#+begin_src crystal
crystal
unless guess.in? 1..5
  puts "Please input a number between 1 and 5."
end
#+end_src
